<?php

namespace nicomartin\ProgressiveWordPress;

class Serviceworker {

	public $capability = '';
	public $sw_query_var = 'wp_service_worker';
	public $sw_path = '';
	public $sw_url = '';

	public function __construct() {
		$this->capability = pwp_get_instance()->Init->capability;
		$this->sw_path    = pwp_get_instance()->upload_dir . 'pwp-serviceworker.js';
		$this->sw_url     = pwp_get_instance()->upload_url . 'pwp-serviceworker.js';
		if ( is_multisite() ) {
			$this->sw_path = pwp_get_instance()->upload_dir . 'pwp-serviceworker-' . get_current_blog_id() . '.js';
			$this->sw_url  = pwp_get_instance()->upload_url . 'pwp-serviceworker-' . get_current_blog_id() . '.js';
		}
	}

	public function run() {
		add_action( 'admin_notices', [ $this, 'ssl_error_notice' ] );
		add_action( 'pwp_after_save', [ $this, 'regenerate' ] );
		add_action( 'pwp_on_update', [ $this, 'regenerate' ] );
		add_action( 'pwp_on_deactivate', [ $this, 'delete_serviceworker' ] );
		add_action( 'wp_head', [ $this, 'unregister_pwp_sw' ] );

		// if https://github.com/xwp/pwa-wp
		add_action( 'plugins_loaded', [ $this, 'register_service_worker' ] );

		// if not https://github.com/xwp/pwa-wp
		add_action( 'parse_request', [ $this, 'wp_return_sw' ] );
		add_filter( 'query_vars', [ $this, 'wp_add_service_worker_query_var' ] );
		add_action( 'wp_head', [ $this, 'register_sw' ] );

	}

	public function ssl_error_notice() {

		if ( is_ssl() ) {
			return;
		}

		$screen = get_current_screen();
		if ( PWP_SETTINGS_PARENT != $screen->parent_base ) {
			return;
		}

		echo '<div class="notice notice-error">';
		echo '<p>' . __( 'Your site has to be served over https to use progressive web app features.', 'pwp' ) . '</p>';
		echo '</div>';
	}

	public function regenerate() {
		$content_header = "'use strict';\n\n";
		$content_header .= "/**\n";
		$content_header .= " * generated by Progressive WordPress:\n";
		$content_header .= " * https://wordpress.org/plugins/progressive-wordpress/\n";
		$content_header .= " * by Nico Martin - https://nicomartin.ch\n";
		$content_header .= "**/\n";
		$content_header .= 'const version = \'{{time}}\';';
		$content        = apply_filters( 'pwp_sw_content', '' );
		$path           = plugin_dir_path( pwp_get_instance()->file ) . 'Classes/Libs';
		require_once $path . '/minify/autoload.php';
		require_once $path . '/path-converter/autoload.php';
		$minifier = new \MatthiasMullie\Minify\JS( $content );
		$content  = $minifier->minify();
		$content  = $content_header . $content;
		$content  = "( function() {\n" . $content . "} )();\n";

		/**
		 * check if not the same:
		 * this provides a way that the version will only be updated if there are changes in the sw-file.
		 */
		$current_content = '';
		if ( is_file( $this->sw_path ) ) {
			$current_content = file_get_contents( $this->sw_path );
		}
		$new_content_check = str_replace( '{{time}}', get_option( 'pwp_sw_time' ), $content );

		if ( $current_content == $new_content_check ) {
			return;
		}
		/**
		 * set new content
		 */
		$time    = time();
		$content = str_replace( '{{time}}', $time, $content );
		// Wrap content into IIFE.
		pwp_delete( $this->sw_path );
		$save = pwp_put_contents( $this->sw_path, $content );
		if ( ! $save ) {
			add_action( 'admin_notices', function () {
				echo '<div class="notice notice-error">';
				// translators: There was a problem generating your serviceworker file. Please check your permissions for ABSPATH
				echo '<p>' . sprintf( __( 'There was a problem generating your serviceworker file. Please check your permissions for %s', 'pwp' ), '<code>' . ABSPATH . '</code>' ) . '</p>';
				echo '</div>';
			} );

			return;
		} else {
			add_action( 'admin_notices', function () {
				echo '<div class="notice notice-success">';
				// translators: There was a problem generating your serviceworker file. Please check your permissions for ABSPATH
				echo '<p>' . __( 'ServiceWorker regenerated', 'pwp' ) . '</p>';
				echo '</div>';
			} );
		}
		update_option( 'pwp_sw_time', $time );
	}

	public function delete_serviceworker() {
		pwp_delete( $this->sw_path );
	}

	public function unregister_pwp_sw() {
		if ( ! isset( $_SERVER['HTTPS'] ) ) {
			return;
		}
		?>
		<script type="text/javascript" id="serviceworker-unregister">
			if ('serviceWorker' in navigator) {
				navigator.serviceWorker.getRegistrations().then(function (registrations) {
					registrations.forEach(function (registration) {
						if (registration.active.scriptURL === window.location.origin + '/pwp-serviceworker.js') {
							registration.unregister();
						}
					});
				});
			}
		</script>
		<?php
	}

	/**
	 * if https://github.com/xwp/pwa-wp
	 */

	public function register_service_worker() {
		if ( function_exists( 'wp_register_service_worker' ) && file_exists( $this->sw_path ) ) {
			wp_register_service_worker( 'progressive-wp-offline-sw', function () {
				return pwp_get_instance()->Offlineusage->get_sw_content();
			}, [], \WP_Service_Workers::SCOPE_FRONT );
			wp_register_service_worker( 'progressive-wp-sw', $this->sw_url, [], \WP_Service_Workers::SCOPE_FRONT );
		}
	}

	/**
	 * if not https://github.com/xwp/pwa-wp
	 */

	public function wp_return_sw() {
		if ( function_exists( 'wp_register_service_worker' ) ) {
			return;
		}
		if ( isset( $GLOBALS['wp']->query_vars['wp_service_worker'] ) ) {
			if ( 1 == $GLOBALS['wp']->query_vars['wp_service_worker'] ) {
				if ( file_exists( $this->sw_path ) ) {
					header( 'Content-Type: text/javascript; charset=utf-8' );
					echo "/* PWP register */\n";
					echo pwp_get_instance()->Offlineusage->get_sw_content();
					echo file_get_contents( $this->sw_path );
					exit;
				}
			}
		}
	}

	public function wp_add_service_worker_query_var( $query_vars ) {
		if ( function_exists( 'wp_register_service_worker' ) ) {
			return $query_vars;
		}
		$query_vars[] = 'wp_service_worker';

		return $query_vars;
	}

	public function register_sw() {
		if ( function_exists( 'wp_register_service_worker' ) || ! isset( $_SERVER['HTTPS'] ) ) {
			return;
		}
		?>
		<script type="text/javascript" id="serviceworker">
			if (navigator.serviceWorker) {
				window.addEventListener('load', function () {
					navigator.serviceWorker.register(
						<?php
						echo wp_json_encode( add_query_arg( [
							'wp_service_worker' => 1,
						], home_url( '/', 'https' ) ) );
						?>, {"scope": "\/"}
					);
				});
			}
		</script>
		<?php
	}
}
