<?php

namespace nicomartin\ProgressiveWordPress;

class Serviceworker {

	public $capability = '';
	public $sw_path = ABSPATH . 'pwp-serviceworker.js';
	public $sw_url = '/pwp-serviceworker.js';

	public function __construct() {
		$this->capability = pwp_get_instance()->Init->capability;
	}

	public function run() {
		add_action( 'admin_notices', [ $this, 'ssl_error_notice' ] );
		add_action( 'pwp_after_save', [ $this, 'regenerate' ] );
		add_action( 'pwp_on_update', [ $this, 'regenerate' ] );
		add_action( 'pwp_on_deactivate', [ $this, 'delete_serviceworker' ] );

		if ( file_exists( $this->sw_path ) ) {
			add_action( 'wp_head', [ $this, 'add_to_header' ], 500 );
		}
	}

	public function ssl_error_notice() {

		if ( is_ssl() ) {
			return;
		}

		$screen = get_current_screen();
		if ( PWP_SETTINGS_PARENT != $screen->parent_base ) {
			return;
		}

		echo '<div class="notice notice-error">';
		echo '<p>' . __( 'Your site has to be served over https to use progressive web app features.', 'pwp' ) . '</p>';
		echo '</div>';
	}

	public function add_to_header() {

		$url = untrailingslashit( get_home_url() ) . $this->sw_url;
		?>
		<script type="text/javascript" id="serviceworker">
			if ('serviceWorker' in navigator) {
				if (location.protocol !== 'https:') {
					console.log('[Progressive WordPress] <?php echo addslashes( __( 'Your site needs to be served via HTTPS to use Progressive Web App functionality', 'pwp' ) ); ?>');
				} else {
					window.addEventListener('load', function () {
						navigator.serviceWorker.register('<?php echo pwp_register_url( $url ); ?>')
							.then(function (registration) {
								registration.update();
							})
							.catch(function (error) {
								console.log('[Progressive WordPress] <?php echo addslashes( __( 'Registration failed', 'pwp' ) ); ?>: ' + error);
							});
					});
				}
			} else {
				console.log('[Progressive WordPress] <?php echo addslashes( __( 'Your browser does not support Progressive Web App functionality', 'pwp' ) ); ?>');
			}
			<?php
			if ( pwp_get_setting( 'pwp-force-deregister-sw' ) ) {
			?>
			if ('serviceWorker' in navigator) {
				navigator.serviceWorker.getRegistrations().then(function (registrations) {
					registrations.forEach(function (registration) {
						if (registration.active.scriptURL !== window.location.origin + '<?php echo pwp_register_url( $url ); ?>') {
							registration.unregister().then(function (boolean) {
								if (boolean) {
									console.log(registration.active.scriptURL + ' unregistered');
								} else {
									console.log(registration.active.scriptURL + ' unregistration failed');
								}
							});
						}
					});
				});
			}
			<?php
			}
			?>
		</script>
		<?php
	}

	/**
	 * Helpers
	 */

	public function regenerate() {

		$content_header = "'use strict';\n\n";
		$content_header .= "/**\n";
		$content_header .= " * generated by Progressive WordPress:\n";
		$content_header .= " * https://wordpress.org/plugins/progressive-wordpress/\n";
		$content_header .= " * by Nico Martin - https://nicomartin.ch\n";
		$content_header .= "**/\n";
		$content_header .= 'const version = \'{{time}}\';';

		$content = apply_filters( 'pwp_sw_content', '' );
		$path    = plugin_dir_path( pwp_get_instance()->file ) . 'Classes/Libs';
		require_once $path . '/minify/autoload.php';
		require_once $path . '/path-converter/autoload.php';
		$minifier = new \MatthiasMullie\Minify\JS( $content );

		$content = $minifier->minify();
		$content = $content_header . $content;

		/**
		 * check if not the same:
		 * this provides a way that the version will only be updated if there are changes in the sw-file.
		 */
		$current_content = '';
		if ( is_file( $this->sw_path ) ) {
			$current_content = file_get_contents( $this->sw_path );
		}
		$new_content_check = str_replace( '{{time}}', get_option( 'pwp_sw_time' ), $content );
		if ( $current_content == $new_content_check ) {
			return;
		}

		/**
		 * set new content
		 */
		$time    = time();
		$content = str_replace( '{{time}}', $time, $content );
		pwp_delete( $this->sw_path );
		$save = pwp_put_contents( $this->sw_path, $content );
		if ( ! $save ) {
			add_action( 'admin_notices', function () {
				echo '<div class="notice notice-error">';
				// translators: There was a problem generating your serviceworker file. Please check your permissions for ABSPATH
				echo '<p>' . sprintf( __( 'There was a problem generating your serviceworker file. Please check your permissions for %s', 'pwp' ), '<code>' . ABSPATH . '</code>' ) . '</p>';
				echo '</div>';
			} );

			return;
		} else {
			add_action( 'admin_notices', function () {
				echo '<div class="notice notice-success">';
				// translators: There was a problem generating your serviceworker file. Please check your permissions for ABSPATH
				echo '<p>' . __( 'ServiceWorker regenerated', 'pwp' ) . '</p>';
				echo '</div>';
			} );
		}
		update_option( 'pwp_sw_time', $time );
	}

	public function delete_serviceworker() {
		pwp_delete( $this->sw_path );
	}
}
